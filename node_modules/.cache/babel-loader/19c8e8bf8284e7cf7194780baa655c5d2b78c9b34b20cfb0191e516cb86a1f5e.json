{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nexport const fetchPosts = createAsyncThunk('posts/fetchPosts', async () => {\n  const res = await fetch(`https://dummyjson.com/quotes`);\n  const data = await res.json();\n  return data;\n});\nconst initialState = {\n  items: [],\n  status: 'idle',\n  error: null\n};\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    /*increment: (state) => {\r\n      state.value += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload\r\n    },*/\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchPosts.pending, state => {\n      state.status = 'loading';\n    });\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  increment,\n  decrement,\n  incrementByAmount\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchPosts","res","fetch","data","json","initialState","items","status","error","counterSlice","name","reducers","extraReducers","builder","addCase","pending","state","increment","decrement","incrementByAmount","actions","reducer"],"sources":["C:/Users/HP/Desktop/react/frontend/src/crud/counterSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk  } from '@reduxjs/toolkit'\r\n\r\nexport const fetchPosts = createAsyncThunk(\r\n  'posts/fetchPosts',\r\n  async () =>{\r\n    const res = await fetch(`https://dummyjson.com/quotes`);\r\n    const data = await res.json();\r\n    return data;\r\n  }\r\n)\r\n\r\nconst initialState = {\r\n  items: [],\r\n  status: 'idle',\r\n  error: null\r\n}\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    /*increment: (state) => {\r\n      state.value += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload\r\n    },*/\r\n  },\r\n  extraReducers: (builder) =>{\r\n    builder\r\n    .addCase(fetchPosts.pending, (state) =>{\r\n      state.status = 'loading';\r\n    })\r\n  }\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\r\n\r\nexport default counterSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAS,kBAAkB;AAEjE,OAAO,MAAMC,UAAU,GAAGD,gBAAgB,CACxC,kBAAkB,EAClB,YAAW;EACT,MAAME,GAAG,GAAG,MAAMC,KAAK,CAAE,8BAA6B,CAAC;EACvD,MAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAI,CAAC,CAAC;EAC7B,OAAOD,IAAI;AACb,CACF,CAAC;AAED,MAAME,YAAY,GAAG;EACnBC,KAAK,EAAE,EAAE;EACTC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGX,WAAW,CAAC;EACtCY,IAAI,EAAE,SAAS;EACfL,YAAY;EACZM,QAAQ,EAAE;IACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EARI,CASD;EACDC,aAAa,EAAGC,OAAO,IAAI;IACzBA,OAAO,CACNC,OAAO,CAACd,UAAU,CAACe,OAAO,EAAGC,KAAK,IAAI;MACrCA,KAAK,CAACT,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC;EACJ;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEU,SAAS;EAAEC,SAAS;EAAEC;AAAkB,CAAC,GAAGV,YAAY,CAACW,OAAO;AAE/E,eAAeX,YAAY,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import{createSlice,createAsyncThunk}from'@reduxjs/toolkit';export const fetchPosts=createAsyncThunk('posts/fetchPosts',async()=>{const res=await fetch(\"https://dummyjson.com/quotes\");const data=await res.json();return data;});const initialState={items:[],status:'idle',error:null};export const counterSlice=createSlice({name:'counter',initialState,reducers:{/*increment: (state) => {\r\n      state.value += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload\r\n    },*/},extraReducers:builder=>{builder.addCase(fetchPosts.pending,state=>{state.status='loading';});}});// Action creators are generated for each case reducer function\nexport const{increment,decrement,incrementByAmount}=counterSlice.actions;export default counterSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchPosts","res","fetch","data","json","initialState","items","status","error","counterSlice","name","reducers","extraReducers","builder","addCase","pending","state","increment","decrement","incrementByAmount","actions","reducer"],"sources":["C:/Users/HP/Desktop/react/frontend/src/crud/counterSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk  } from '@reduxjs/toolkit'\r\n\r\nexport const fetchPosts = createAsyncThunk(\r\n  'posts/fetchPosts',\r\n  async () =>{\r\n    const res = await fetch(`https://dummyjson.com/quotes`);\r\n    const data = await res.json();\r\n    return data;\r\n  }\r\n)\r\n\r\nconst initialState = {\r\n  items: [],\r\n  status: 'idle',\r\n  error: null\r\n}\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    /*increment: (state) => {\r\n      state.value += 1\r\n    },\r\n    decrement: (state) => {\r\n      state.value -= 1\r\n    },\r\n    incrementByAmount: (state, action) => {\r\n      state.value += action.payload\r\n    },*/\r\n  },\r\n  extraReducers: (builder) =>{\r\n    builder\r\n    .addCase(fetchPosts.pending, (state) =>{\r\n      state.status = 'loading';\r\n    })\r\n  }\r\n})\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\r\n\r\nexport default counterSlice.reducer"],"mappings":"AAAA,OAASA,WAAW,CAAEC,gBAAgB,KAAS,kBAAkB,CAEjE,MAAO,MAAM,CAAAC,UAAU,CAAGD,gBAAgB,CACxC,kBAAkB,CAClB,SAAW,CACT,KAAM,CAAAE,GAAG,CAAG,KAAM,CAAAC,KAAK,+BAA+B,CAAC,CACvD,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAF,GAAG,CAACG,IAAI,CAAC,CAAC,CAC7B,MAAO,CAAAD,IAAI,CACb,CACF,CAAC,CAED,KAAM,CAAAE,YAAY,CAAG,CACnBC,KAAK,CAAE,EAAE,CACTC,MAAM,CAAE,MAAM,CACdC,KAAK,CAAE,IACT,CAAC,CAED,MAAO,MAAM,CAAAC,YAAY,CAAGX,WAAW,CAAC,CACtCY,IAAI,CAAE,SAAS,CACfL,YAAY,CACZM,QAAQ,CAAE,CACR;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QARI,CASD,CACDC,aAAa,CAAGC,OAAO,EAAI,CACzBA,OAAO,CACNC,OAAO,CAACd,UAAU,CAACe,OAAO,CAAGC,KAAK,EAAI,CACrCA,KAAK,CAACT,MAAM,CAAG,SAAS,CAC1B,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CAEF;AACA,MAAO,MAAM,CAAEU,SAAS,CAAEC,SAAS,CAAEC,iBAAkB,CAAC,CAAGV,YAAY,CAACW,OAAO,CAE/E,cAAe,CAAAX,YAAY,CAACY,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
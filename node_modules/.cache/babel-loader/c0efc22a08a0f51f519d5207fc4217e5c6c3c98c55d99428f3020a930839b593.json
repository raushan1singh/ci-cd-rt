{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { nanoid } from 'nanoid';\nimport axios from \"axios\";\nexport const fetchApiData = createAsyncThunk('counter/fetchApiData', async id => {\n  const response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`);\n  //console.log(response.data);\n  return response.data;\n});\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState: {\n    val: [],\n    apiData: null,\n    // New state to hold fetched API data\n    status: 'idle',\n    // For managing loading status\n    error: null // For storing errors, if any\n  },\n  reducers: {\n    add: (state, actions) => {\n      state.val.push({\n        id: nanoid(),\n        value: actions.payload\n      });\n    },\n    edt: (state, actions) => {\n      const {\n        id,\n        value\n      } = actions.payload;\n      const ind = state.val.findIndex(d => d.id === id);\n      const pr = prompt('Enter Value', value);\n      state.val[ind].value = pr;\n    },\n    dlt: (state, actions) => {\n      state.val = state.val.filter(v => {\n        return v.id !== actions.payload;\n      });\n    },\n    extraReducers: builder => {\n      builder.addCase(fetchApiData.pending, state => {\n        state.status = 'loading';\n      }).addCase(fetchApiData.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.apiData = 'action.payload';\n      }).addCase(fetchApiData.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n    }\n  }\n});\n\n// Action creators are generated for each case reducer function\nexport const {\n  add,\n  edt,\n  dlt\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","nanoid","axios","fetchApiData","id","response","get","data","counterSlice","name","initialState","val","apiData","status","error","reducers","add","state","actions","push","value","payload","edt","ind","findIndex","d","pr","prompt","dlt","filter","v","extraReducers","builder","addCase","pending","fulfilled","action","rejected","message","reducer"],"sources":["C:/Users/HP/Desktop/react/frontend/src/redux/reducer.js"],"sourcesContent":["import { createSlice, createAsyncThunk  } from '@reduxjs/toolkit';\r\nimport { nanoid } from 'nanoid';\r\nimport axios from \"axios\";\r\n\r\nexport const fetchApiData = createAsyncThunk(\r\n  'counter/fetchApiData',\r\n  async (id) => {\r\n    const response = await axios.get(`https://jsonplaceholder.typicode.com/posts/${id}`);\r\n    //console.log(response.data);\r\n    return response.data;\r\n  }\r\n);\r\n\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState: {\r\n    val: [],\r\n    apiData: null,  // New state to hold fetched API data\r\n    status: 'idle', // For managing loading status\r\n    error: null     // For storing errors, if any\r\n  },\r\n  reducers: {\r\n    add: (state, actions) => {\r\n      state.val.push({id: nanoid(), value: actions.payload});\r\n    },\r\n    edt: (state, actions) =>{\r\n      const { id, value } = actions.payload;\r\n      const ind = state.val.findIndex((d) => d.id === id);\r\n      const pr = prompt('Enter Value', value);\r\n      state.val[ind].value = pr;\r\n    },\r\n    dlt: (state, actions) =>{\r\n      state.val = state.val.filter((v) =>{\r\n        return v.id !== actions.payload;\r\n      })\r\n    },\r\n    extraReducers: (builder) => {\r\n      builder\r\n        .addCase(fetchApiData.pending, (state) => {\r\n          state.status = 'loading';\r\n        })\r\n        .addCase(fetchApiData.fulfilled, (state, action) => {\r\n          state.status = 'succeeded';\r\n          state.apiData = 'action.payload';\r\n        })\r\n        .addCase(fetchApiData.rejected, (state, action) => {\r\n          state.status = 'failed';\r\n          state.error = action.error.message;\r\n        });\r\n    }\r\n  }\r\n});\r\n\r\n// Action creators are generated for each case reducer function\r\nexport const { add, edt, dlt} = counterSlice.actions\r\n\r\nexport default counterSlice.reducer"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAS,kBAAkB;AACjE,SAASC,MAAM,QAAQ,QAAQ;AAC/B,OAAOC,KAAK,MAAM,OAAO;AAEzB,OAAO,MAAMC,YAAY,GAAGH,gBAAgB,CAC1C,sBAAsB,EACtB,MAAOI,EAAE,IAAK;EACZ,MAAMC,QAAQ,GAAG,MAAMH,KAAK,CAACI,GAAG,CAAE,8CAA6CF,EAAG,EAAC,CAAC;EACpF;EACA,OAAOC,QAAQ,CAACE,IAAI;AACtB,CACF,CAAC;AAGD,OAAO,MAAMC,YAAY,GAAGT,WAAW,CAAC;EACtCU,IAAI,EAAE,SAAS;EACfC,YAAY,EAAE;IACZC,GAAG,EAAE,EAAE;IACPC,OAAO,EAAE,IAAI;IAAG;IAChBC,MAAM,EAAE,MAAM;IAAE;IAChBC,KAAK,EAAE,IAAI,CAAK;EAClB,CAAC;EACDC,QAAQ,EAAE;IACRC,GAAG,EAAEA,CAACC,KAAK,EAAEC,OAAO,KAAK;MACvBD,KAAK,CAACN,GAAG,CAACQ,IAAI,CAAC;QAACf,EAAE,EAAEH,MAAM,CAAC,CAAC;QAAEmB,KAAK,EAAEF,OAAO,CAACG;MAAO,CAAC,CAAC;IACxD,CAAC;IACDC,GAAG,EAAEA,CAACL,KAAK,EAAEC,OAAO,KAAI;MACtB,MAAM;QAAEd,EAAE;QAAEgB;MAAM,CAAC,GAAGF,OAAO,CAACG,OAAO;MACrC,MAAME,GAAG,GAAGN,KAAK,CAACN,GAAG,CAACa,SAAS,CAAEC,CAAC,IAAKA,CAAC,CAACrB,EAAE,KAAKA,EAAE,CAAC;MACnD,MAAMsB,EAAE,GAAGC,MAAM,CAAC,aAAa,EAAEP,KAAK,CAAC;MACvCH,KAAK,CAACN,GAAG,CAACY,GAAG,CAAC,CAACH,KAAK,GAAGM,EAAE;IAC3B,CAAC;IACDE,GAAG,EAAEA,CAACX,KAAK,EAAEC,OAAO,KAAI;MACtBD,KAAK,CAACN,GAAG,GAAGM,KAAK,CAACN,GAAG,CAACkB,MAAM,CAAEC,CAAC,IAAI;QACjC,OAAOA,CAAC,CAAC1B,EAAE,KAAKc,OAAO,CAACG,OAAO;MACjC,CAAC,CAAC;IACJ,CAAC;IACDU,aAAa,EAAGC,OAAO,IAAK;MAC1BA,OAAO,CACJC,OAAO,CAAC9B,YAAY,CAAC+B,OAAO,EAAGjB,KAAK,IAAK;QACxCA,KAAK,CAACJ,MAAM,GAAG,SAAS;MAC1B,CAAC,CAAC,CACDoB,OAAO,CAAC9B,YAAY,CAACgC,SAAS,EAAE,CAAClB,KAAK,EAAEmB,MAAM,KAAK;QAClDnB,KAAK,CAACJ,MAAM,GAAG,WAAW;QAC1BI,KAAK,CAACL,OAAO,GAAG,gBAAgB;MAClC,CAAC,CAAC,CACDqB,OAAO,CAAC9B,YAAY,CAACkC,QAAQ,EAAE,CAACpB,KAAK,EAAEmB,MAAM,KAAK;QACjDnB,KAAK,CAACJ,MAAM,GAAG,QAAQ;QACvBI,KAAK,CAACH,KAAK,GAAGsB,MAAM,CAACtB,KAAK,CAACwB,OAAO;MACpC,CAAC,CAAC;IACN;EACF;AACF,CAAC,CAAC;;AAEF;AACA,OAAO,MAAM;EAAEtB,GAAG;EAAEM,GAAG;EAAEM;AAAG,CAAC,GAAGpB,YAAY,CAACU,OAAO;AAEpD,eAAeV,YAAY,CAAC+B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}
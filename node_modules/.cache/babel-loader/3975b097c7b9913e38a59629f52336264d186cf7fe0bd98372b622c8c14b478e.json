{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nconst initialState = {\n  vl: [],\n  status: 'idle',\n  error: null\n};\n\n// 🔁 Async thunk to fetch quotes\nexport const fetchQuotes = createAsyncThunk('counter/fetchQuotes', async () => {\n  const response = await fetch('https://dummyjson.com/quotes');\n  const data = await response.json();\n  return data.quotes; // array of quotes\n});\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    addData: (state, action) => {\n      state.vl.push(action.payload);\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchQuotes.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchQuotes.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.vl = action.payload;\n    }).addCase(fetchQuotes.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  addData\n} = counterSlice.actions;\nexport default counterSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","initialState","vl","status","error","fetchQuotes","response","fetch","data","json","quotes","counterSlice","name","reducers","addData","state","action","push","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["C:/Users/HP/Desktop/react/frontend/src/crud/counterSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nconst initialState = {\r\n  vl: [],\r\n  status: 'idle',\r\n  error: null,\r\n};\r\n\r\n// 🔁 Async thunk to fetch quotes\r\nexport const fetchQuotes = createAsyncThunk(\r\n  'counter/fetchQuotes',\r\n  async () => {\r\n    const response = await fetch('https://dummyjson.com/quotes');\r\n    const data = await response.json();\r\n    return data.quotes; // array of quotes\r\n  }\r\n);\r\n\r\nexport const counterSlice = createSlice({\r\n  name: 'counter',\r\n  initialState,\r\n  reducers: {\r\n    addData: (state, action) => {\r\n      state.vl.push(action.payload);\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      .addCase(fetchQuotes.pending, (state) => {\r\n        state.status = 'loading';\r\n      })\r\n      .addCase(fetchQuotes.fulfilled, (state, action) => {\r\n        state.status = 'succeeded';\r\n        state.vl = action.payload;\r\n      })\r\n      .addCase(fetchQuotes.rejected, (state, action) => {\r\n        state.status = 'failed';\r\n        state.error = action.error.message;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { addData } = counterSlice.actions;\r\nexport default counterSlice.reducer;\r\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAEhE,MAAMC,YAAY,GAAG;EACnBC,EAAE,EAAE,EAAE;EACNC,MAAM,EAAE,MAAM;EACdC,KAAK,EAAE;AACT,CAAC;;AAED;AACA,OAAO,MAAMC,WAAW,GAAGL,gBAAgB,CACzC,qBAAqB,EACrB,YAAY;EACV,MAAMM,QAAQ,GAAG,MAAMC,KAAK,CAAC,8BAA8B,CAAC;EAC5D,MAAMC,IAAI,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,MAAM,CAAC,CAAC;AACtB,CACF,CAAC;AAED,OAAO,MAAMC,YAAY,GAAGZ,WAAW,CAAC;EACtCa,IAAI,EAAE,SAAS;EACfX,YAAY;EACZY,QAAQ,EAAE;IACRC,OAAO,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC1BD,KAAK,CAACb,EAAE,CAACe,IAAI,CAACD,MAAM,CAACE,OAAO,CAAC;IAC/B;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAChB,WAAW,CAACiB,OAAO,EAAGP,KAAK,IAAK;MACvCA,KAAK,CAACZ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDkB,OAAO,CAAChB,WAAW,CAACkB,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MACjDD,KAAK,CAACZ,MAAM,GAAG,WAAW;MAC1BY,KAAK,CAACb,EAAE,GAAGc,MAAM,CAACE,OAAO;IAC3B,CAAC,CAAC,CACDG,OAAO,CAAChB,WAAW,CAACmB,QAAQ,EAAE,CAACT,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACZ,MAAM,GAAG,QAAQ;MACvBY,KAAK,CAACX,KAAK,GAAGY,MAAM,CAACZ,KAAK,CAACqB,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEX;AAAQ,CAAC,GAAGH,YAAY,CAACe,OAAO;AAC/C,eAAef,YAAY,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}